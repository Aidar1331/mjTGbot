#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Chrome –∏ ChromeDriver –Ω–∞ Windows
"""

import os
import sys
import time
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_chrome_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome"""
    chrome_paths = [
        r"C:\Program Files\Google\Chrome\Application\chrome.exe",
        r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
        r"C:\Users\{}\AppData\Local\Google\Chrome\Application\chrome.exe".format(os.getenv('USERNAME')),
    ]
    
    for path in chrome_paths:
        if os.path.exists(path):
            logger.info(f"‚úÖ Chrome found at: {path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
            try:
                import subprocess
                result = subprocess.run([path, '--version'], 
                                      capture_output=True, text=True, timeout=10)
                logger.info(f"Chrome version: {result.stdout.strip()}")
                return path
            except Exception as e:
                logger.error(f"Error checking Chrome version: {e}")
        
    logger.error("‚ùå Chrome not found!")
    return None

def test_chromedriver_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ChromeDriver"""
    chromedriver_paths = [
        r"C:\chromedriver\chromedriver.exe",
        r".\chromedriver.exe",
        r"chromedriver.exe"
    ]
    
    for path in chromedriver_paths:
        if os.path.exists(path):
            logger.info(f"‚úÖ ChromeDriver found at: {path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
            try:
                import subprocess
                result = subprocess.run([path, '--version'], 
                                      capture_output=True, text=True, timeout=10)
                logger.info(f"ChromeDriver version: {result.stdout.strip()}")
                return path
            except Exception as e:
                logger.error(f"Error checking ChromeDriver version: {e}")
    
    logger.warning("‚ö†Ô∏è ChromeDriver not found in standard locations")
    logger.info("Will try to use undetected-chromedriver auto-download")
    return None

def test_selenium_import():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Selenium"""
    try:
        import selenium
        logger.info(f"‚úÖ Selenium imported successfully, version: {selenium.__version__}")
        return True
    except ImportError as e:
        logger.error(f"‚ùå Failed to import Selenium: {e}")
        return False

def test_undetected_chromedriver():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ undetected-chromedriver"""
    try:
        import undetected_chromedriver as uc
        logger.info("‚úÖ undetected-chromedriver imported successfully")
        return True
    except ImportError as e:
        logger.error(f"‚ùå Failed to import undetected-chromedriver: {e}")
        return False

def test_basic_selenium():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Selenium"""
    try:
        logger.info("Testing basic Selenium functionality...")
        
        import undetected_chromedriver as uc
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π
        options = uc.ChromeOptions()
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--window-size=1920,1080")
        
        # –ù–∞–π–¥–µ–º Chrome –∏ ChromeDriver
        chrome_path = test_chrome_installation()
        chromedriver_path = test_chromedriver_installation()
        
        driver_kwargs = {"options": options, "version_main": 139}
        
        if chrome_path:
            driver_kwargs["browser_executable_path"] = chrome_path
        if chromedriver_path:
            driver_kwargs["driver_executable_path"] = chromedriver_path
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        logger.info("Creating Chrome driver...")
        driver = uc.Chrome(**driver_kwargs)
        
        try:
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google
            logger.info("Testing navigation to Google...")
            driver.get("https://www.google.com")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.NAME, "q"))
            )
            
            logger.info("‚úÖ Successfully navigated to Google!")
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
            search_box = driver.find_element(By.NAME, "q")
            search_box.send_keys("test selenium")
            search_box.submit()
            
            time.sleep(3)
            logger.info("‚úÖ Search functionality works!")
            
        finally:
            driver.quit()
            logger.info("Driver closed successfully")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Selenium test failed: {e}")
        return False

def test_discord_navigation():
    """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ Discord"""
    try:
        logger.info("Testing Discord navigation...")
        
        import undetected_chromedriver as uc
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π
        options = uc.ChromeOptions()
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--window-size=1920,1080")
        
        # –ù–∞–π–¥–µ–º –ø—É—Ç–∏
        chrome_path = test_chrome_installation()
        chromedriver_path = test_chromedriver_installation()
        
        driver_kwargs = {"options": options, "version_main": 139}
        
        if chrome_path:
            driver_kwargs["browser_executable_path"] = chrome_path
        if chromedriver_path:
            driver_kwargs["driver_executable_path"] = chromedriver_path
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        driver = uc.Chrome(**driver_kwargs)
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Discord
            logger.info("Navigating to Discord login...")
            driver.get("https://discord.com/login")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.NAME, "email"))
            )
            
            logger.info("‚úÖ Successfully reached Discord login page!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è
            email_field = driver.find_element(By.NAME, "email")
            password_field = driver.find_element(By.NAME, "password")
            
            if email_field and password_field:
                logger.info("‚úÖ Login form elements found!")
            
        finally:
            driver.quit()
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Discord navigation test failed: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("=" * 50)
    logger.info("Windows Chrome/Selenium Test Suite")
    logger.info("=" * 50)
    
    results = {}
    
    # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome
    results["chrome"] = test_chrome_installation() is not None
    
    # –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ChromeDriver
    results["chromedriver"] = test_chromedriver_installation() is not None
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Selenium
    results["selenium"] = test_selenium_import()
    
    # –¢–µ—Å—Ç undetected-chromedriver
    results["undetected"] = test_undetected_chromedriver()
    
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Selenium
    if results["selenium"] and results["undetected"]:
        results["basic_selenium"] = test_basic_selenium()
        
        if results["basic_selenium"]:
            # –¢–µ—Å—Ç Discord –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            results["discord"] = test_discord_navigation()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("=" * 50)
    logger.info("Test Results:")
    logger.info("=" * 50)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        logger.info(f"{test_name:20} {status}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_passed = all(results.values())
    if all_passed:
        logger.info("üéâ All tests passed! System is ready for MJ automation.")
    else:
        logger.error("‚ö†Ô∏è  Some tests failed. Please check the issues above.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not results.get("chrome"):
            logger.error("Install Google Chrome from https://www.google.com/chrome/")
        if not results.get("chromedriver"):
            logger.error("Download ChromeDriver and place it in C:\\chromedriver\\")
        if not results.get("selenium"):
            logger.error("Install Selenium: pip install selenium")
        if not results.get("undetected"):
            logger.error("Install undetected-chromedriver: pip install undetected-chromedriver")
    
    return 0 if all_passed else 1

if __name__ == "__main__":
    exit(main())